#!/usr/bin/env python

import sys
import time
import json
import argparse
import re
import datetime

from zapv2 import ZAPv2


def openZapProxy(args):
    args.zap_host = re.sub(r'^((?!http://).*)',
                           r'http://\1', args.zap_host)
    args.zap_host_ssh = re.sub(r'^((?!http?s://).*)',
                               r'https://\1', args.zap_host_ssh)

    return ZAPv2(proxies={'http': args.zap_host,
                          'https': args.zap_host_ssh})


def fetchArguments():
    parse = argparse.ArgumentParser()
    parse.add_argument('-t', '--target', help='Specify target to scan',
                       default='http://localhost:80', dest='target')
    parse.add_argument('-z', '--zap-host', help='address and port of ZAP host',
                       default='127.0.0.1:8080', dest='zap_host')
    parse.add_argument('-Z', '--zap-host-ssh',
                       help='address and port of SSH ZAP host',
                       default='localhost:8080', dest='zap_host_ssh')
    return parse.parse_args()


def main():
    args = fetchArguments()

    zap = openZapProxy(args)

    sys.stdout.write('Accessing %s\n' % args.target)

    open_con = False

    while not open_con:
        try:
            zap.urlopen(args.target)
            print("Open connection :-)")
            open_con = True
            break
        except:
            print("Connection refused by the server..")
            print("Let me sleep for 5 seconds")
            print("ZZzzzz...")
            time.sleep(5)
            print("Was a nice sleep, now let me continue...")
            continue

    # Give the sites tree a chance to get updated
    time.sleep(5)

    sys.stdout.write('Spidering %s\n' % args.target)
    zap.spider.scan(args.target)

    time.sleep(5)
    while (int(zap.spider.status()) < 100):
        sys.stdout.write('Spider progress %: \n' + zap.spider.status())
        time.sleep(5)

    sys.stdout.write('Spider completed\n')
    # Give the passive scanner a chance to finish
    time.sleep(10)
    print("Info: Spider completed; writing results.\n")
    print(zap.spider.results())
    print()
    time.sleep(10)

    sys.stdout.write('Scanning %s\n' % args.target)
    zap.ascan.scan(args.target)
    while (int(zap.ascan.status()) < 100):
        time.sleep(10)

    time.sleep(60)

    sys.stdout.write('Info: Scan completed; writing results.\n')
    with open('results-%s.json' % datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"), 'w') as f:
        json.dump(zap.core.alerts(), f)

    print(zap.core.alerts())


if __name__ == '__main__':
    main()